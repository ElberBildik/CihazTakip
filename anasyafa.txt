using System;
using System.Data;
using System.Drawing;
using System.Net.NetworkInformation;
using System.Windows.Forms;

namespace Cihaz_Takip_Uygulaması
{
    public partial class Form1 : Form
    {
        private Timer pingTimer; // Timer değişkeni
        private int currentRowIndex = 0; // Veritabanındaki satırın sırası

        public Form1()
        {
            InitializeComponent();
            VerileriYukle(); // Form ilk açıldığında verileri getir
            InitializeTimer(); // Timer'ı başlat
        }

        private void InitializeTimer()
        {
            pingTimer = new Timer();
            pingTimer.Interval = 500; // 0.5 saniyede bir kontrol etsin (1000 ms)
            pingTimer.Tick += PingTimer_Tick; // Her zaman diliminde yapılacak işlemi belirle
        }

        private void PingTimer_Tick(object sender, EventArgs e)
        {
            if (currentRowIndex >= Cihazlar.Rows.Count)
            {
                currentRowIndex = 0;
            }

            PingIslemleri.PingVeRenklendir(Cihazlar, MesajlarRchTxt, currentRowIndex);
            Cihazlar.Refresh();

            currentRowIndex++;
        }

        private void PingAtBtn_Click(object sender, EventArgs e)
        {
            MesajlarRchTxt.Clear(); // Mesaj kutusunu temizle

            // Timer'ı başlat
            pingTimer.Start();
        }

        private void StopPingBtn_Click(object sender, EventArgs e)
        {
            // Timer'ı durdur
            pingTimer.Stop();
            MesajlarRchTxt.AppendText("Ping işlemi durduruldu.\n");
        }

        private void VerileriYukle()
        {
            try
            {
                DataTable dt = VeriErisim.VerileriGetir(); // Sınıftan verileri al
                Cihazlar.DataSource = dt;

                // Otomatik sütun ve satır boyutlandırma
                Cihazlar.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
                Cihazlar.AutoSizeRowsMode = DataGridViewAutoSizeRowsMode.AllCells;

                Cihazlar.Refresh();

                // Durum renklendirme
                HücreRenkleme.DurumRenklendir(Cihazlar);
            }
            catch (Exception ex)
            {
                MessageBox.Show("Veriler yüklenirken hata oluştu: " + ex.Message);
            }
        }

        private void PingIptalBtn_Click(object sender, EventArgs e)
        {
            // Kullanıcıya onay sorusu sormak için MessageBox kullanıyoruz
            DialogResult result = MessageBox.Show("Ping atma işlemini durdurmak istiyor musunuz?",
                                                  "İşlem İptali",
                                                  MessageBoxButtons.YesNo,
                                                  MessageBoxIcon.Question);

            if (result == DialogResult.Yes)
            {
                // Eğer kullanıcı "Evet" derse, timer'ı durduruyoruz
                pingTimer.Stop();
                MesajlarRchTxt.AppendText("Ping işlemi durduruldu.\n");
            }
            else
            {
                // Kullanıcı "Hayır" derse, herhangi bir işlem yapılmaz
                MesajlarRchTxt.AppendText("Ping işlemi devam ediyor.\n");
            }
        }

        private void pictureBox1_Click(object sender, EventArgs e)//refresh butonu
        {

            DataTable dt = VeriErisim.VerileriGetir(); // Sınıftan verileri al
            Cihazlar.DataSource = dt;

            // Otomatik sütun ve satır boyutlandırma
            Cihazlar.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
            Cihazlar.AutoSizeRowsMode = DataGridViewAutoSizeRowsMode.AllCells;

            Cihazlar.Refresh();
        }

        private void pictureBox2_Click(object sender, EventArgs e)//arama yapma butonu
        {
            string ipNo = araTxtBox.Text; // TextBox'a girilen IP numarasını al

            // Eğer kullanıcı boş bir değer girerse, filtreleme yapılmaz
            if (string.IsNullOrWhiteSpace(ipNo))
            {
                MessageBox.Show("Lütfen bir IP numarası girin.");
                return;
            }

            DataTable dt = VeriErisim.VerileriGetir(); // Veritabanından verileri al

            // Buradaki LIKE ifadesinin doğru sözdizimi ile kullanılması gerekiyor.
            string filterExpression = string.Format("IPNo LIKE '%{0}%'", ipNo); // Doğru sözdizimi

            try
            {
                DataRow[] filteredRows = dt.Select(filterExpression); // Filtreleme işlemi

                // Filtrelenmiş satırları yeni bir DataTable'a aktar
                DataTable filteredDataTable = dt.Clone(); // Yeni bir DataTable oluşturuyoruz
                foreach (DataRow row in filteredRows)
                {
                    filteredDataTable.ImportRow(row); // Filtrelenmiş satırları ekliyoruz
                }

                // Filtrelenmiş verileri DataGridView'e atıyoruz
                Cihazlar.DataSource = filteredDataTable;
                Cihazlar.Refresh();
            }
            catch (SyntaxErrorException ex)
            {
                MessageBox.Show("Filtreleme işlemi sırasında hata oluştu: " + ex.Message);
            }
        }

        private void groupBox1_Enter(object sender, EventArgs e)
        {

        }

        private void Form1_Load(object sender, EventArgs e)
        {

        }
    }
}